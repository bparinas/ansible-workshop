---

#common
- hosts: all
  become: yes
  become_method: sudo
  gather_facts: no
  remote_user: ubuntu

  tasks:

  - name: install git
    action: apt name=git state=installed update_cache=yes

#web
- hosts: web
  become: yes
  become_method: sudo
  remote_user: ubuntu

  vars:
    #https://github.com/bparinas/rolling-updates/releases
    app_version: 1.0
  serial: 1

  pre_tasks:

  - name: disable server in haproxy
    shell: echo "disable server app-main/{{ inventory_hostname }}" | socat stdio /var/lib/haproxy/stats
    delegate_to: "{{ item }}"
    with_items: "{{ groups.loadbalancer}}"

  tasks:

  - name: install nginx
    action: apt name=git state=installed

  - name: write our nginx.conf
    action: template src=templates/nginx.conf.j2 dest=/etc/nginx/nginx.conf
    notify: restart nginx

  - name: write our /etc/nginx/sites-available/default
    action: template src=templates/default-site.j2 dest=/etc/nginx/sites-available/default
    notify: restart nginx

  - name: clean existing website content
    file: path=/usr/share/nginx/html/ state=absent

  - name: deploy website content
    git: repo=https://github.com/bparinas/rolling-updates.git
         dest=/usr/share/nginx/html/
         version={{ app_version }}

  handlers:

  - name: restart nginx
    action: service name=nginx state=restarted

  post_tasks:

  - name: enable server in haproxy
    shell: echo "enable server app-main/{{ inventory_hostname }}" | socat stdio /var/lib/haproxy/stats
    delegate_to: "{{ item }}"
    with_items: "{{ groups.loadbalancer}}"

#lb
- hosts: lb
  become: yes
  become_method: sudo
  remote_user: ubuntu

  tasks:
  
  - name: download and install haproxy and socat
    apt: pkg={{ item }} state=latest
    with_items:
    - haproxy
    - socat

  - name: enable haproxy
    lineinfile: dest=/etc/default/haproxy regexp="^ENABLED" line="ENABLED=1"
    notify: restart haproxy

  - name: configure the haproxy config file with hosts
    template: src=templates/haproxy.cfg.j2 dest=/etc/haproxy/haproxy.cfg
    notify: restart haproxy

  handlers:

  - name: restart haproxy
    service: name=haproxy state=restarted
